{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Transform" : "AWS::Serverless-2016-10-31",
  "Description" : "Starting template for an AWS Serverless Application.",
  "Parameters" : {
  },
  "Resources" : {
    "CheckFunction" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "CheckProfanityAwsLambda::CheckProfanityAwsLambda.CheckFunction::CheckProfanityHandler",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "Description": "Main check function",
        "MemorySize": 256,
        "Timeout": 30,
        "Role"    : {"Fn::GetAtt" : [ "ProffanityRole", "Arn"]},
        "Policies": [ "AWSLambda_FullAccess" ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/Check", 
              "Method": "POST"
            }
          }
        }
      }
    },
    "Health" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "CheckProfanityAwsLambda::CheckProfanityAwsLambda.CheckFunction::HealthHandle",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "Description": "Main health function",
        "MemorySize": 256,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambda_FullAccess", "AmazonRekognitionFullAccess" ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/Health",
              "Method": "GET"
            }
          }
        }
      }
    },
    "ProcessStatEvent" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "CheckProfanityAwsLambda::CheckProfanityAwsLambda.StatProcessingFunction::ProcessStatEvent",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "Description": "Processing stat function",
        "MemorySize": 256,
        "Timeout": 3,
        "Role": {"Fn::GetAtt" : [ "ProffanityRole", "Arn"]},
        "Policies": [ "AWSLambda_FullAccess", "AmazonRekognitionFullAccess" ],
        "Events": {
            "SQSEvent": {
                "Type": "SQS",
                "Properties": {
                    "Queue": {"Fn::GetAtt" : [ "SQSStat", "Arn"]}
                }
            }
         }
      }
    },
    "BasketAddFunction" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "CheckProfanityAwsLambda::CheckProfanityAwsLambda.BasketFunctions::BasketAddWordHandler",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "Description": "Add word into basket",
        "MemorySize": 256,
        "Timeout": 30,
        "Role"    : {"Fn::GetAtt" : [ "ProffanityRole", "Arn"]},
        "Policies": [ "AWSLambda_FullAccess", "AmazonRekognitionFullAccess" ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/AddWord/{word}",
              "Method": "GET"
            }
          }
        }
      }
    },
    "BasketRemoveFunction" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "CheckProfanityAwsLambda::CheckProfanityAwsLambda.BasketFunctions::BasketRemoveWordHandler",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "Description": "Add word into basket",
        "MemorySize": 256,
        "Timeout": 30,
        "Role"    : {"Fn::GetAtt" : [ "ProffanityRole", "Arn"]},
        "Policies": [ "AWSLambda_FullAccess" ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/RemoveWord/{word}",
              "Method": "GET"
            }
          }
        }
      }
    },
    "BasketListWordFunction" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "CheckProfanityAwsLambda::CheckProfanityAwsLambda.BasketFunctions::BasketListWordHandler",
        "Runtime": "dotnetcore3.1",
        "CodeUri": "",
        "Description": "List of words into basket",
        "MemorySize": 256,
        "Timeout": 30,
        "Role"    : {"Fn::GetAtt" : [ "ProffanityRole", "Arn"]},
        "Policies": [ "AWSLambda_FullAccess" ],
        "Events": {
          "RootGet": {
            "Type": "Api",
            "Properties": {
              "Path": "/WordsList",
              "Method": "GET"
            }
          }
        }
      }
    },
    "SQSStat":{
      "Type" : "AWS::SQS::Queue",
      "Properties": {
        "QueueName" : "profanity-stat-queue",
        "MessageRetentionPeriod" : 300
      }
    },
    "ProffanityS3Backet" : {
      "Type" : "AWS::S3::Bucket",
      "Properties": {
        "BucketName" : "profanity.storage.eu.central"
      }
    },
    "ProffanityRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument" : {
                "Version" : "2012-10-17",
                "Statement" : [
                    {
                        "Action" : [
                            "sts:AssumeRole"
                        ],
                        "Effect" : "Allow",
                        "Principal" : {
                            "Service" : [
                                "lambda.amazonaws.com"
                            ]
                        }
                    }
                ]
            },
            "Policies" : [
                {
                    "PolicyName": "S3Access",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                            {
                              "Effect": "Allow",
                              "Action": [
                                    "*"
                              ],
                              "Resource": [
                                  {"Fn::GetAtt" : [ "ProffanityS3Backet", "Arn"]},
                                    "arn:aws:s3:::profanity.storage.eu.central/*"
                                ]
                            }
                        ]
                    }
                },
                {
                    "PolicyName": "SQSStat",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                        {
                            "Action": [
                                "sqs:*"
                            ],
                            "Effect": "Allow",
                            "Resource": [{"Fn::GetAtt" : ["SQSStat", "Arn"]}]
                        }
                        ]
                    }
                },
                {
                    "PolicyName": "WordTableAccess",
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:Scan",
                                "dynamodb:DeleteItem",
                                "dynamodb:GetItem",
                                "dynamodb:PutItem",
                                "dynamodb:Query",
                                "dynamodb:UpdateItem"
                              ],
                              "Resource": [{"Fn::GetAtt" : ["WordsTable", "Arn"]}]
                        }
                      ]
                    }
                },
                {
                    "PolicyName": "Logs",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": [{"Fn::GetAtt" : ["WatchLogGroup", "Arn"]}]
                                }
                            ]
                    }
                }
            ]
        }
    },
    "WatchLogGroup": {
        "Type" : "AWS::Logs::LogGroup",
        "DeletionPolicy" : "Delete",
        "Properties":{
            "LogGroupName": "Serilog",
            "RetentionInDays": "7"
        }
    },
    "WordsTable" : {
        "Type": "AWS::DynamoDB::Table",
        "Properties" : {
            "TableName" : "WordsTable",
            "AttributeDefinitions" : [
                { "AttributeName": "Word", "AttributeType" : "S"},
                { "AttributeName": "Time", "AttributeType" : "N"},
                { "AttributeName": "Cnt", "AttributeType" : "N"}
            ],
            "KeySchema" : [
                {"AttributeName": "Word", "KeyType" : "HASH"}
            ],
            "ProvisionedThroughput" : {
                "ReadCapacityUnits" : "10",
                "WriteCapacityUnits" : "10"
            }
        }
    }
  },
  "Outputs": {
    "ApiURL": {
      "Description": "API endpoint URL for Prod environment",
      "Value": {
        "Fn::Sub": "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      }
    },
    "ProffanityS3Backet": {
      "Value": {
        "Ref": "ProffanityS3Backet"
      },
      "Description": "Bucket that will invoke the lambda function when new objects are created."
    },
    "WordTable": {
        "Value": {
            "Fn::GetAtt" : ["WordsTable", "Arn"]
        },
        "Description": "Bucket that will invoke the lambda function when new objects are created."
    }


  }
}